{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Manager = void 0;\n\nconst eio = require(\"engine.io-client\");\n\nconst socket_1 = require(\"./socket\");\n\nconst Emitter = require(\"component-emitter\");\n\nconst parser = require(\"socket.io-parser\");\n\nconst on_1 = require(\"./on\");\n\nconst bind = require(\"component-bind\");\n\nconst Backoff = require(\"backo2\");\n\nconst debug = require(\"debug\")(\"socket.io-client:manager\");\n\nclass Manager extends Emitter {\n  constructor(uri, opts) {\n    super();\n    this.nsps = {};\n    this.subs = [];\n    this.connecting = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    this.opts = opts;\n    this.reconnection(opts.reconnection !== false);\n    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    this.reconnectionDelay(opts.reconnectionDelay || 1000);\n    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n    this.randomizationFactor(opts.randomizationFactor || 0.5);\n    this.backoff = new Backoff({\n      min: this.reconnectionDelay(),\n      max: this.reconnectionDelayMax(),\n      jitter: this.randomizationFactor()\n    });\n    this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n    this._readyState = \"closed\";\n    this.uri = uri;\n\n    const _parser = opts.parser || parser;\n\n    this.encoder = new _parser.Encoder();\n    this.decoder = new _parser.Decoder();\n    this._autoConnect = opts.autoConnect !== false;\n    if (this._autoConnect) this.open();\n  }\n\n  reconnection(v) {\n    if (!arguments.length) return this._reconnection;\n    this._reconnection = !!v;\n    return this;\n  }\n\n  reconnectionAttempts(v) {\n    if (v === undefined) return this._reconnectionAttempts;\n    this._reconnectionAttempts = v;\n    return this;\n  }\n\n  reconnectionDelay(v) {\n    if (v === undefined) return this._reconnectionDelay;\n    this._reconnectionDelay = v;\n    this.backoff && this.backoff.setMin(v);\n    return this;\n  }\n\n  randomizationFactor(v) {\n    if (v === undefined) return this._randomizationFactor;\n    this._randomizationFactor = v;\n    this.backoff && this.backoff.setJitter(v);\n    return this;\n  }\n\n  reconnectionDelayMax(v) {\n    if (v === undefined) return this._reconnectionDelayMax;\n    this._reconnectionDelayMax = v;\n    this.backoff && this.backoff.setMax(v);\n    return this;\n  }\n\n  timeout(v) {\n    if (!arguments.length) return this._timeout;\n    this._timeout = v;\n    return this;\n  }\n  /**\r\n   * Starts trying to reconnect if reconnection is enabled and we have not\r\n   * started reconnecting yet\r\n   *\r\n   * @private\r\n   */\n\n\n  maybeReconnectOnOpen() {\n    // Only try to reconnect if it's the first time we're connecting\n    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n      // keeps reconnection from firing twice for the same reconnection loop\n      this.reconnect();\n    }\n  }\n  /**\r\n   * Sets the current transport `socket`.\r\n   *\r\n   * @param {Function} fn - optional, callback\r\n   * @return {Manager} self\r\n   * @public\r\n   */\n\n\n  open(fn) {\n    debug(\"readyState %s\", this._readyState);\n    if (~this._readyState.indexOf(\"open\")) return this;\n    debug(\"opening %s\", this.uri);\n    this.engine = eio(this.uri, this.opts);\n    const socket = this.engine;\n    const self = this;\n    this._readyState = \"opening\";\n    this.skipReconnect = false; // emit `open`\n\n    const openSub = on_1.on(socket, \"open\", function () {\n      self.onopen();\n      fn && fn();\n    }); // emit `error`\n\n    const errorSub = on_1.on(socket, \"error\", err => {\n      debug(\"error\");\n      self.cleanup();\n      self._readyState = \"closed\";\n      super.emit(\"error\", err);\n\n      if (fn) {\n        fn(err);\n      } else {\n        // Only do this if there is no fn to handle the error\n        self.maybeReconnectOnOpen();\n      }\n    });\n\n    if (false !== this._timeout) {\n      const timeout = this._timeout;\n      debug(\"connect attempt will timeout after %d\", timeout);\n\n      if (timeout === 0) {\n        openSub.destroy(); // prevents a race condition with the 'open' event\n      } // set timer\n\n\n      const timer = setTimeout(() => {\n        debug(\"connect attempt timed out after %d\", timeout);\n        openSub.destroy();\n        socket.close();\n        socket.emit(\"error\", new Error(\"timeout\"));\n      }, timeout);\n      this.subs.push({\n        destroy: function () {\n          clearTimeout(timer);\n        }\n      });\n    }\n\n    this.subs.push(openSub);\n    this.subs.push(errorSub);\n    return this;\n  }\n  /**\r\n   * Alias for open()\r\n   *\r\n   * @return {Manager} self\r\n   * @public\r\n   */\n\n\n  connect(fn) {\n    return this.open(fn);\n  }\n  /**\r\n   * Called upon transport open.\r\n   *\r\n   * @private\r\n   */\n\n\n  onopen() {\n    debug(\"open\"); // clear old subs\n\n    this.cleanup(); // mark as open\n\n    this._readyState = \"open\";\n    super.emit(\"open\"); // add new subs\n\n    const socket = this.engine;\n    this.subs.push(on_1.on(socket, \"data\", bind(this, \"ondata\")));\n    this.subs.push(on_1.on(socket, \"ping\", bind(this, \"onping\")));\n    this.subs.push(on_1.on(socket, \"error\", bind(this, \"onerror\")));\n    this.subs.push(on_1.on(socket, \"close\", bind(this, \"onclose\")));\n    this.subs.push(on_1.on(this.decoder, \"decoded\", bind(this, \"ondecoded\")));\n  }\n  /**\r\n   * Called upon a ping.\r\n   *\r\n   * @private\r\n   */\n\n\n  onping() {\n    super.emit(\"ping\");\n  }\n  /**\r\n   * Called with data.\r\n   *\r\n   * @private\r\n   */\n\n\n  ondata(data) {\n    this.decoder.add(data);\n  }\n  /**\r\n   * Called when parser fully decodes a packet.\r\n   *\r\n   * @private\r\n   */\n\n\n  ondecoded(packet) {\n    super.emit(\"packet\", packet);\n  }\n  /**\r\n   * Called upon socket error.\r\n   *\r\n   * @private\r\n   */\n\n\n  onerror(err) {\n    debug(\"error\", err);\n    super.emit(\"error\", err);\n  }\n  /**\r\n   * Creates a new socket for the given `nsp`.\r\n   *\r\n   * @return {Socket}\r\n   * @public\r\n   */\n\n\n  socket(nsp, opts) {\n    let socket = this.nsps[nsp];\n\n    if (!socket) {\n      socket = new socket_1.Socket(this, nsp, opts);\n      this.nsps[nsp] = socket;\n      var self = this;\n      socket.on(\"connecting\", onConnecting);\n\n      if (this._autoConnect) {\n        // manually call here since connecting event is fired before listening\n        onConnecting();\n      }\n    }\n\n    function onConnecting() {\n      if (!~self.connecting.indexOf(socket)) {\n        self.connecting.push(socket);\n      }\n    }\n\n    return socket;\n  }\n  /**\r\n   * Called upon a socket close.\r\n   *\r\n   * @param {Socket} socket\r\n   * @private\r\n   */\n\n\n  _destroy(socket) {\n    const index = this.connecting.indexOf(socket);\n    if (~index) this.connecting.splice(index, 1);\n    if (this.connecting.length) return;\n\n    this._close();\n  }\n  /**\r\n   * Writes a packet.\r\n   *\r\n   * @param {Object} packet\r\n   * @private\r\n   */\n\n\n  _packet(packet) {\n    debug(\"writing packet %j\", packet);\n    if (packet.query && packet.type === 0) packet.nsp += \"?\" + packet.query;\n    const encodedPackets = this.encoder.encode(packet);\n\n    for (let i = 0; i < encodedPackets.length; i++) {\n      this.engine.write(encodedPackets[i], packet.options);\n    }\n  }\n  /**\r\n   * Clean up transport subscriptions and packet buffer.\r\n   *\r\n   * @private\r\n   */\n\n\n  cleanup() {\n    debug(\"cleanup\");\n    const subsLength = this.subs.length;\n\n    for (let i = 0; i < subsLength; i++) {\n      const sub = this.subs.shift();\n      sub.destroy();\n    }\n\n    this.decoder.destroy();\n  }\n  /**\r\n   * Close the current socket.\r\n   *\r\n   * @private\r\n   */\n\n\n  _close() {\n    debug(\"disconnect\");\n    this.skipReconnect = true;\n    this._reconnecting = false;\n\n    if (\"opening\" === this._readyState) {\n      // `onclose` will not fire because\n      // an open event never happened\n      this.cleanup();\n    }\n\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    if (this.engine) this.engine.close();\n  }\n  /**\r\n   * Alias for close()\r\n   *\r\n   * @private\r\n   */\n\n\n  disconnect() {\n    return this._close();\n  }\n  /**\r\n   * Called upon engine close.\r\n   *\r\n   * @private\r\n   */\n\n\n  onclose(reason) {\n    debug(\"onclose\");\n    this.cleanup();\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    super.emit(\"close\", reason);\n\n    if (this._reconnection && !this.skipReconnect) {\n      this.reconnect();\n    }\n  }\n  /**\r\n   * Attempt a reconnection.\r\n   *\r\n   * @private\r\n   */\n\n\n  reconnect() {\n    if (this._reconnecting || this.skipReconnect) return this;\n    const self = this;\n\n    if (this.backoff.attempts >= this._reconnectionAttempts) {\n      debug(\"reconnect failed\");\n      this.backoff.reset();\n      super.emit(\"reconnect_failed\");\n      this._reconnecting = false;\n    } else {\n      const delay = this.backoff.duration();\n      debug(\"will wait %dms before reconnect attempt\", delay);\n      this._reconnecting = true;\n      const timer = setTimeout(() => {\n        if (self.skipReconnect) return;\n        debug(\"attempting reconnect\");\n        super.emit(\"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n        if (self.skipReconnect) return;\n        self.open(err => {\n          if (err) {\n            debug(\"reconnect attempt error\");\n            self._reconnecting = false;\n            self.reconnect();\n            super.emit(\"reconnect_error\", err);\n          } else {\n            debug(\"reconnect success\");\n            self.onreconnect();\n          }\n        });\n      }, delay);\n      this.subs.push({\n        destroy: function () {\n          clearTimeout(timer);\n        }\n      });\n    }\n  }\n  /**\r\n   * Called upon successful reconnect.\r\n   *\r\n   * @private\r\n   */\n\n\n  onreconnect() {\n    const attempt = this.backoff.attempts;\n    this._reconnecting = false;\n    this.backoff.reset();\n    super.emit(\"reconnect\", attempt);\n  }\n\n}\n\nexports.Manager = Manager;","map":{"version":3,"sources":["C:/_LEARNING/demo-web-sockets/client/node_modules/socket.io-client/build/manager.js"],"names":["Object","defineProperty","exports","value","Manager","eio","require","socket_1","Emitter","parser","on_1","bind","Backoff","debug","constructor","uri","opts","nsps","subs","connecting","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","maybeReconnectOnOpen","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSub","on","onopen","errorSub","err","cleanup","emit","destroy","timer","setTimeout","close","Error","push","clearTimeout","connect","onping","ondata","data","add","ondecoded","packet","onerror","nsp","Socket","onConnecting","_destroy","index","splice","_close","_packet","query","type","encodedPackets","encode","i","write","options","subsLength","sub","shift","reset","disconnect","onclose","reason","delay","duration","onreconnect","attempt"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Manager = void 0;\r\nconst eio = require(\"engine.io-client\");\r\nconst socket_1 = require(\"./socket\");\r\nconst Emitter = require(\"component-emitter\");\r\nconst parser = require(\"socket.io-parser\");\r\nconst on_1 = require(\"./on\");\r\nconst bind = require(\"component-bind\");\r\nconst Backoff = require(\"backo2\");\r\nconst debug = require(\"debug\")(\"socket.io-client:manager\");\r\nclass Manager extends Emitter {\r\n    constructor(uri, opts) {\r\n        super();\r\n        this.nsps = {};\r\n        this.subs = [];\r\n        this.connecting = [];\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = undefined;\r\n        }\r\n        opts = opts || {};\r\n        opts.path = opts.path || \"/socket.io\";\r\n        this.opts = opts;\r\n        this.reconnection(opts.reconnection !== false);\r\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\r\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\r\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\r\n        this.randomizationFactor(opts.randomizationFactor || 0.5);\r\n        this.backoff = new Backoff({\r\n            min: this.reconnectionDelay(),\r\n            max: this.reconnectionDelayMax(),\r\n            jitter: this.randomizationFactor(),\r\n        });\r\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\r\n        this._readyState = \"closed\";\r\n        this.uri = uri;\r\n        const _parser = opts.parser || parser;\r\n        this.encoder = new _parser.Encoder();\r\n        this.decoder = new _parser.Decoder();\r\n        this._autoConnect = opts.autoConnect !== false;\r\n        if (this._autoConnect)\r\n            this.open();\r\n    }\r\n    reconnection(v) {\r\n        if (!arguments.length)\r\n            return this._reconnection;\r\n        this._reconnection = !!v;\r\n        return this;\r\n    }\r\n    reconnectionAttempts(v) {\r\n        if (v === undefined)\r\n            return this._reconnectionAttempts;\r\n        this._reconnectionAttempts = v;\r\n        return this;\r\n    }\r\n    reconnectionDelay(v) {\r\n        if (v === undefined)\r\n            return this._reconnectionDelay;\r\n        this._reconnectionDelay = v;\r\n        this.backoff && this.backoff.setMin(v);\r\n        return this;\r\n    }\r\n    randomizationFactor(v) {\r\n        if (v === undefined)\r\n            return this._randomizationFactor;\r\n        this._randomizationFactor = v;\r\n        this.backoff && this.backoff.setJitter(v);\r\n        return this;\r\n    }\r\n    reconnectionDelayMax(v) {\r\n        if (v === undefined)\r\n            return this._reconnectionDelayMax;\r\n        this._reconnectionDelayMax = v;\r\n        this.backoff && this.backoff.setMax(v);\r\n        return this;\r\n    }\r\n    timeout(v) {\r\n        if (!arguments.length)\r\n            return this._timeout;\r\n        this._timeout = v;\r\n        return this;\r\n    }\r\n    /**\r\n     * Starts trying to reconnect if reconnection is enabled and we have not\r\n     * started reconnecting yet\r\n     *\r\n     * @private\r\n     */\r\n    maybeReconnectOnOpen() {\r\n        // Only try to reconnect if it's the first time we're connecting\r\n        if (!this._reconnecting &&\r\n            this._reconnection &&\r\n            this.backoff.attempts === 0) {\r\n            // keeps reconnection from firing twice for the same reconnection loop\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Sets the current transport `socket`.\r\n     *\r\n     * @param {Function} fn - optional, callback\r\n     * @return {Manager} self\r\n     * @public\r\n     */\r\n    open(fn) {\r\n        debug(\"readyState %s\", this._readyState);\r\n        if (~this._readyState.indexOf(\"open\"))\r\n            return this;\r\n        debug(\"opening %s\", this.uri);\r\n        this.engine = eio(this.uri, this.opts);\r\n        const socket = this.engine;\r\n        const self = this;\r\n        this._readyState = \"opening\";\r\n        this.skipReconnect = false;\r\n        // emit `open`\r\n        const openSub = on_1.on(socket, \"open\", function () {\r\n            self.onopen();\r\n            fn && fn();\r\n        });\r\n        // emit `error`\r\n        const errorSub = on_1.on(socket, \"error\", (err) => {\r\n            debug(\"error\");\r\n            self.cleanup();\r\n            self._readyState = \"closed\";\r\n            super.emit(\"error\", err);\r\n            if (fn) {\r\n                fn(err);\r\n            }\r\n            else {\r\n                // Only do this if there is no fn to handle the error\r\n                self.maybeReconnectOnOpen();\r\n            }\r\n        });\r\n        if (false !== this._timeout) {\r\n            const timeout = this._timeout;\r\n            debug(\"connect attempt will timeout after %d\", timeout);\r\n            if (timeout === 0) {\r\n                openSub.destroy(); // prevents a race condition with the 'open' event\r\n            }\r\n            // set timer\r\n            const timer = setTimeout(() => {\r\n                debug(\"connect attempt timed out after %d\", timeout);\r\n                openSub.destroy();\r\n                socket.close();\r\n                socket.emit(\"error\", new Error(\"timeout\"));\r\n            }, timeout);\r\n            this.subs.push({\r\n                destroy: function () {\r\n                    clearTimeout(timer);\r\n                },\r\n            });\r\n        }\r\n        this.subs.push(openSub);\r\n        this.subs.push(errorSub);\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for open()\r\n     *\r\n     * @return {Manager} self\r\n     * @public\r\n     */\r\n    connect(fn) {\r\n        return this.open(fn);\r\n    }\r\n    /**\r\n     * Called upon transport open.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        debug(\"open\");\r\n        // clear old subs\r\n        this.cleanup();\r\n        // mark as open\r\n        this._readyState = \"open\";\r\n        super.emit(\"open\");\r\n        // add new subs\r\n        const socket = this.engine;\r\n        this.subs.push(on_1.on(socket, \"data\", bind(this, \"ondata\")));\r\n        this.subs.push(on_1.on(socket, \"ping\", bind(this, \"onping\")));\r\n        this.subs.push(on_1.on(socket, \"error\", bind(this, \"onerror\")));\r\n        this.subs.push(on_1.on(socket, \"close\", bind(this, \"onclose\")));\r\n        this.subs.push(on_1.on(this.decoder, \"decoded\", bind(this, \"ondecoded\")));\r\n    }\r\n    /**\r\n     * Called upon a ping.\r\n     *\r\n     * @private\r\n     */\r\n    onping() {\r\n        super.emit(\"ping\");\r\n    }\r\n    /**\r\n     * Called with data.\r\n     *\r\n     * @private\r\n     */\r\n    ondata(data) {\r\n        this.decoder.add(data);\r\n    }\r\n    /**\r\n     * Called when parser fully decodes a packet.\r\n     *\r\n     * @private\r\n     */\r\n    ondecoded(packet) {\r\n        super.emit(\"packet\", packet);\r\n    }\r\n    /**\r\n     * Called upon socket error.\r\n     *\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        debug(\"error\", err);\r\n        super.emit(\"error\", err);\r\n    }\r\n    /**\r\n     * Creates a new socket for the given `nsp`.\r\n     *\r\n     * @return {Socket}\r\n     * @public\r\n     */\r\n    socket(nsp, opts) {\r\n        let socket = this.nsps[nsp];\r\n        if (!socket) {\r\n            socket = new socket_1.Socket(this, nsp, opts);\r\n            this.nsps[nsp] = socket;\r\n            var self = this;\r\n            socket.on(\"connecting\", onConnecting);\r\n            if (this._autoConnect) {\r\n                // manually call here since connecting event is fired before listening\r\n                onConnecting();\r\n            }\r\n        }\r\n        function onConnecting() {\r\n            if (!~self.connecting.indexOf(socket)) {\r\n                self.connecting.push(socket);\r\n            }\r\n        }\r\n        return socket;\r\n    }\r\n    /**\r\n     * Called upon a socket close.\r\n     *\r\n     * @param {Socket} socket\r\n     * @private\r\n     */\r\n    _destroy(socket) {\r\n        const index = this.connecting.indexOf(socket);\r\n        if (~index)\r\n            this.connecting.splice(index, 1);\r\n        if (this.connecting.length)\r\n            return;\r\n        this._close();\r\n    }\r\n    /**\r\n     * Writes a packet.\r\n     *\r\n     * @param {Object} packet\r\n     * @private\r\n     */\r\n    _packet(packet) {\r\n        debug(\"writing packet %j\", packet);\r\n        if (packet.query && packet.type === 0)\r\n            packet.nsp += \"?\" + packet.query;\r\n        const encodedPackets = this.encoder.encode(packet);\r\n        for (let i = 0; i < encodedPackets.length; i++) {\r\n            this.engine.write(encodedPackets[i], packet.options);\r\n        }\r\n    }\r\n    /**\r\n     * Clean up transport subscriptions and packet buffer.\r\n     *\r\n     * @private\r\n     */\r\n    cleanup() {\r\n        debug(\"cleanup\");\r\n        const subsLength = this.subs.length;\r\n        for (let i = 0; i < subsLength; i++) {\r\n            const sub = this.subs.shift();\r\n            sub.destroy();\r\n        }\r\n        this.decoder.destroy();\r\n    }\r\n    /**\r\n     * Close the current socket.\r\n     *\r\n     * @private\r\n     */\r\n    _close() {\r\n        debug(\"disconnect\");\r\n        this.skipReconnect = true;\r\n        this._reconnecting = false;\r\n        if (\"opening\" === this._readyState) {\r\n            // `onclose` will not fire because\r\n            // an open event never happened\r\n            this.cleanup();\r\n        }\r\n        this.backoff.reset();\r\n        this._readyState = \"closed\";\r\n        if (this.engine)\r\n            this.engine.close();\r\n    }\r\n    /**\r\n     * Alias for close()\r\n     *\r\n     * @private\r\n     */\r\n    disconnect() {\r\n        return this._close();\r\n    }\r\n    /**\r\n     * Called upon engine close.\r\n     *\r\n     * @private\r\n     */\r\n    onclose(reason) {\r\n        debug(\"onclose\");\r\n        this.cleanup();\r\n        this.backoff.reset();\r\n        this._readyState = \"closed\";\r\n        super.emit(\"close\", reason);\r\n        if (this._reconnection && !this.skipReconnect) {\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Attempt a reconnection.\r\n     *\r\n     * @private\r\n     */\r\n    reconnect() {\r\n        if (this._reconnecting || this.skipReconnect)\r\n            return this;\r\n        const self = this;\r\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\r\n            debug(\"reconnect failed\");\r\n            this.backoff.reset();\r\n            super.emit(\"reconnect_failed\");\r\n            this._reconnecting = false;\r\n        }\r\n        else {\r\n            const delay = this.backoff.duration();\r\n            debug(\"will wait %dms before reconnect attempt\", delay);\r\n            this._reconnecting = true;\r\n            const timer = setTimeout(() => {\r\n                if (self.skipReconnect)\r\n                    return;\r\n                debug(\"attempting reconnect\");\r\n                super.emit(\"reconnect_attempt\", self.backoff.attempts);\r\n                // check again for the case socket closed in above events\r\n                if (self.skipReconnect)\r\n                    return;\r\n                self.open((err) => {\r\n                    if (err) {\r\n                        debug(\"reconnect attempt error\");\r\n                        self._reconnecting = false;\r\n                        self.reconnect();\r\n                        super.emit(\"reconnect_error\", err);\r\n                    }\r\n                    else {\r\n                        debug(\"reconnect success\");\r\n                        self.onreconnect();\r\n                    }\r\n                });\r\n            }, delay);\r\n            this.subs.push({\r\n                destroy: function () {\r\n                    clearTimeout(timer);\r\n                },\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon successful reconnect.\r\n     *\r\n     * @private\r\n     */\r\n    onreconnect() {\r\n        const attempt = this.backoff.attempts;\r\n        this._reconnecting = false;\r\n        this.backoff.reset();\r\n        super.emit(\"reconnect\", attempt);\r\n    }\r\n}\r\nexports.Manager = Manager;\r\n"]},"metadata":{},"sourceType":"script"}